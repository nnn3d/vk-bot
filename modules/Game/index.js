'use strict';

const ModuleEventController = require('../../classes/base/ModuleEventController');
const UserStatistics = require('../../classes/db/UserStatistics');
const UserHourStatistics = require('../../classes/db/UserHourStatistics');
const GameChatInfo = require('./GameChatInfo');
const GameUserInfo = require('./GameUserInfo');
const GameDuelInfo = require('./GameDuelInfo');
const GameRandomDuelInfo = require('./GameRandomDuelInfo');
const Message = require('../../classes/core/Message');
const promiseFactory = require('../../helpers/promiseFactory');

module.exports = class Game extends ModuleEventController {

    /**
     * @typedef {Object} GameUserInfo
     * @property {Number} chatId
     * @property {Number} userId
     * @property {String} name
     * @property {Number} gold
     * @property {Number} state
     * @property {Number} active
     * @property {Number} lastActive
     * @property {Number} activePower
     * @property {Number} equipmentPower
     * @property {Number} lvlPower
     * @property {Number} fullPower
     * @property {Number} duelsWin
     * @property {Number} duelsLoose
     * @property {Number} rating
     * @property {Number} lvl
     * @property {Number} exp
     * @property {{ name: String, power: Number }} helmet
     * @property {{ name: String, power: Number }} armor
     * @property {{ name: String, power: Number }} weapon
     */

    /**
     *
     * @param config
     */
    constructor({
                    config = {},
                } = {}) {
        super();
        this.config = {
            userStateFromHours: 3,
            userStateByHours: 24,
            auctionDuration: 3,
            salaryByUser: 13,
            duelCost: 25,
            maxEquipmentPower: 35,
            defaultUserState: 60,
            activePowerRatio: 0.75,
            lvlPowerRatio: 0.75,
            maxPowerLuck: 0.15,
            salaryPeriod: 36e5,
            auctionPeriod: 36e5,
            duelPeriod: 36e5,
            randomDuelPeriod: 36e5,
            chatDuelPeriod: 36e5,
            // salaryPeriod: 0,
            // auctionPeriod: 0,
            // duelPeriod: 0,
            // randomDuelPeriod: 0,
            // chatDuelPeriod: 0,
            maxRateRandomDuelPerLvl: 4,
            maxRateChatDuelPerLvl: 10,
            expFromDuel: 6,
            expToLevel: 30,
            chatDuelUserCountRatio: 1,
            chatDuelLooserGoldRatio: 0.6,
            salaryFromChatLvlRatio: 0.06,
            equipmentScatter: 0.2,
            auctionMaxCostByPower: 1000,
            auctionEquipmentByChatLvl: 0.07,
            auctionMaxEquipmentCount: 15,
            chatsTopCount: 15,
            usersTopCount: 15,
        };
        Object.assign(this.config, config);
    }

    /**
     * @returns {Specification}
     */
    moduleSpecification() {
        return {
            type: 'chat',
            commandList: {
                name: '–ò–≥—Ä–∞',
                description: '–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã –≤ —á–∞—Ç - –ø–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É—á–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤ –¥—É—ç–ª—è—Ö –∏ –±–∏—Ç–≤–∞—Ö –≥–∏–ª—å–¥–∏–π, —á–µ–º –≤—ã –∞–∫—Ç–∏–≤–Ω–µ–µ –≤ —á–∞—Ç–µ - —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –±—É–¥–µ—Ç–µ!',
            },
            web: {
                icon: {
                    name: 'MdVideogameAsset',
                    options: {
                        color: '#9e1208',
                    }
                },
            },
            messageTemplate: {
                duelFinals: [
                    '–ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–π —Å—Ö–≤–∞—Ç–∫–∏, #{0}, –∏—Å–ø–æ–ª—å–∑—É—è #{2} –¥–æ–±–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ #{1} —É–¥–∞—Ä–æ–º –≤ #{3}!\nüèÜ #{4} –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!',
                ],
                userInfoEnd: '—Å–∏–ª–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è: üí™ #{0}\n' +
                'üìä —Å–∏–ª–∞ –∞–∫—Ç–∏–≤–∞: üí™ #{1}\n' +
                'üéì —Å–∏–ª–∞ —É—Ä–æ–≤–Ω—è: üí™ #{2}\n' +
                'üîÜ —Å–∏–ª–∞ —É–¥–∞—á–∏: üí™ #{3}\n' +
                'ü§∫ —Å—É–º–º–∞—Ä–Ω–∞—è —Å–∏–ª–∞: üí™ #{4}',
                duelInfo: '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –¥—É—ç–ª–∏:\n#{0}\n#{1}',
                userInfoSmall: '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ #{0}:\n' +
                '—Å–æ—Å—Ç–æ—è–Ω–∏–µ: #{1} (#{2}%)\n' +
                '—É—Ä–æ–≤–µ–Ω—å: #{4}',
            },
            commands: [
                {
                    name: 'help',
                    check: {
                        args: /^–∏–≥—Ä–∞ –ø–æ–º–æ—â—å$/i
                    },
                    commandList: {
                        name: '–ø–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ',
                        usage: '–∏–≥—Ä–∞ –ø–æ–º–æ—â—å',
                    },
                    messageTemplate: {
                        title:
`–£ –∫a–∂–¥o–≥–æ —É—áa—Å—Ç–Ω–∏–∫a —á–∞—Ça ec—Ç—å —Å–≤o–π –∏–≥—Äo–≤o–π –ø–µ—Äc–æ–Ω–∞–∂, –∏–º–µ—é—â–∏–π: –æ—Å–Ωo–≤–Ω—É—é x–∞p–∞–∫—Çe—Ä–∏—Å—Ç–∏–∫—É - —Å–∏–ª—É (üí™), –≥–æ–ª–¥—É (üí∞), —É—Ä–æ–≤–µ–Ω—å (üéì) (–∑a–≤–∏—Å–∏—Ç o—Ç o–ø—ã—Ça EXP) –∏ c–Ωa—Ä—è–∂–µ–Ω–∏–µ (—à–ª–µ–º (‚õë), –±—Äo–Ω—è (üõ°) –∏ o—Ä—É–∂–∏–µ (‚öî)), –∫o—Çopoe —É–≤e–ª–∏—á–∏–≤ae—Ç —Å–∏–ª—É –ø–µ—Äc–æ–Ωa–∂–∞ –∏ –ø–æ–∫—É–ø–∞e—Çc—è –Ωa a—É–∫—Ü–∏o–Ω–µ. –†–∞–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ / –ø–æ—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–±—ã—á–Ω—ã—Ö –∏ —Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—è—Ö.
–¢–∞–∫–∂–µ —É –ø–µp—Åo–Ω–∞–∂–∞ e—Å—Ç—å —Åo—Å—Ço—è–Ω–∏e (–≤ %) - o–Ω–æ o–øp–µ–¥e–ª—è–µ—Ç—Å—è –æ—Ç–Ωo—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—âe–≥o –∏ –¥–Ω–µ–≤–Ωo–≥o a–∫—Ç–∏–≤–∞ —É—áa—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Çe.

–ê—É–∫—Ü–∏–æ–Ω - —ç—Ç–æ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ãc—Ça–≤–ª—è–µ—Çc—è c–ª—É—áa–π–Ω–æ–µ —Å–Ωa—Ä—è–∂–µ–Ω–∏–µ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ x–∞p–∞–∫—Çep–∏c—Ç–∏–∫–∞–º–∏ (—áe–º –≤—ã—àe xa—Äa–∫—Çep–∏—Å—Ç–∏–∫–∏, —Çe–º —Ä–µ–∂e –≤—ã–øa–¥a–µ—Ç). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ –æ–¥–Ω–æ–π –≤–µ—â–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${this.config.maxEquipmentPower} –µ–¥–∏–Ω–∏—Ü. –ê—É–∫—Ü–∏–æ–Ω –º–æ–∂–Ω–æ –ø—Äo–≤–æ–¥–∏—Ç—å –Ω–µ —áa—â–µ, —á–µ–º —Äa–∑ –≤ —áa—Å. –ù–∞ –∞—É–∫—Ü–∏–æ–Ω –º–æ–∂–Ω–æ –≤–ª–æ–∂–∏—Ç—å –≥–æ–ª–¥—É –∏–∑ –∫–∞–∑–Ω—ã –≥–∏–ª—å–¥–∏–∏, –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ - ${this._getMaxAuctionCost()} üí∞).

–£ –∫–∞–∂–¥o–≥o —á–∞—Ça e—Å—Ç—å –≥–∏–ª—å–¥–∏—è, —É –∫–æ—Ç–æp–æ–π –∏–ºee—Ç—Å—è —É—Äo–≤–µ–Ω—å (üéì) - –æ–øpe–¥–µ–ª—èe—Ç—Å—è –∫a–∫ —Åpe–¥–Ω–µe o—Ç –≤—Å–µx —Épo–≤–Ω–µ–π —É—áac—Ç–Ω–∏–∫–æ–≤. –ö–∞–∑–Ω–∞ (üí∞) - –øo–ø–æ–ª–Ω—è—Ç—å e–µ –º–æ–∂–Ωo —É—áa–≤c—Ç–≤—É—è –≤ –±–∏—Ç–≤ax –≥–∏–ª—å–¥–∏–π, –∏ —Ä–∞–Ω–≥(o–øp–µ–¥e–ª—è–µ—Çc—è –∫o–ª–∏—áe—Å—Ç–≤o–º –ø–æ–±–µ–¥ / –øp–æ–∏–≥—Ä—ã—à–µ–π –≥–∏–ª—å–¥–∏–∏). –óa –∫a–∂–¥—ã–π –±–æ–π –≥–∏–ª—å–¥–∏–π –≤—ã –øo–ª—É—á–∞–µ—Ç–µ –≥–æ–ª–¥—É, –∫–æ—Ç–æ—Ä–∞—è —É—Ö–æ–¥–∏—Ç –≤ –∫–∞–∑–Ω—É, –Ω–µ–∑a–≤–∏c–∏–ºo o—Ç —Ç–æ–≥o –ø—Ä–æ–∏–≥—Äa–ª–∏ –ª–∏ –≤—ã –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ (–≤—ã–∏–≥p—ã–≤a—è –ø–æ–ª—É—áa–µ—à—å –±–æ–ª—å—à–µ) –∞ —Ç–∞–∫ –∂–µ –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç—Å—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º(—Ç–æ—Ç –∫—Ç–æ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ ). –üo–ª—É—áae–º—ã–π –æ–ø—ã—Ç —Ç–∞–∫ –∂e –∑–∞–≤–∏c–∏—Ç –æ—Ç pa–∑–Ω–∏—Ü—ã –≤ c–∏–ª–µ –∫–∞–∫ –∏ –≤ –æ–±—ã—á–Ω—ã—Ö –¥—É—ç–ª—è—Ö. –û—Ç —É—Ä–æ–≤–Ω—è –∑–∞–≤–∏—Å–∏—Ç —Ç–æ, —Å–∫–æ–ª—å–∫–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –¥–æ–ø. —Å—Ç–∞–≤–∫—É, —Ç–æ –µ—Å—Ç—å —áe–º –±o–ª—å—àe —É—Ä–æ–≤e–Ω—å –≥–∏–ª—å–¥–∏–∏ —Ç–µ–º –±o–ª—å—à–µ –≤—ã –ºo–∂–µ—Ç–µ –øoc—Ça–≤–∏—Ç—å –≥–æ–ª–¥—ã –Ωa –¥–æ–øo–ª–Ω–∏—Çe–ª—å–Ω—É—é —Å—Ça–≤–∫—É.

–†a–∑ –≤ —áac –≤ce–º –ø–µpc–æ–Ω–∞–∂a–º —áa—Ç–∞ –º–æ–∂–Ωo –≤—ã–¥a–≤a—Ç—å –∂a–ª–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–∞–∑–Ω—ã –≥–∏–ª—å–¥–∏–∏ - –æ–±—â–∞—è c—É–º–ºa –¥–ª—è —áa—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫o–ª–∏—á–µc—Ç–≤a –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –øo—Å–ªe–¥–Ωe–µ –≤p–µ–º—è —É—á–∞c—Ç–Ω–∏–∫–æ–≤, –∞ –∫–æ–ª–∏—áec—Ç–≤o –∂a–ª–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–∞–∂–¥o–≥o –øepco–Ωa–∂–∞ - –≤ –∑a–≤–∏—Å–∏–º–æc—Ç–∏ o—Ç –ø–æc–ªe–¥–Ω–µ–≥o a–∫—Ç–∏–≤a —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ o—Ç–Ωo—Å–∏—Çe–ª—å–Ω–æ o–±—âe–≥–æ, –∫o–ª–∏—áec—Ç–≤–æ –∂–∞–ª–æ–≤–∞–Ω–∏—è –∑a–≤–∏c–∏—Ç o—Ç —Épo–≤–Ω—è –≥–∏–ª—å–¥–∏–∏.

–üe—Äco–Ωa–∂–∏ –ºo–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ –¥—É—ç–ª–∏ (–∫–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ºo–∂e—Ç –≤—ã–∑–≤a—Ç—å –øpo–≤o–¥–∏—Ç—å –¥—É—ç–ª—å —Ä–∞–∑ –≤ —á–∞—Å).
–ù–∞ –¥—É—ç–ª–∏ cpa–≤–Ω–∏–≤a–µ—Çc—è o–±—â–∞—è —Å–∏–ªa —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫o—Ç–æ—Äa—è —è–≤–ª—èe—Çc—è c—É–º–ºo–π:
1) –≤—Åe–≥o c–Ω–∞p—è–∂–µ–Ω–∏—è —É—á–∞c—Ç–Ω–∏–∫a
2) c–∏–ª—ã a–∫—Ç–∏–≤a, o–øp–µ–¥–µ–ª–µ–Ω–Ωo–π –∏–∑ –ø–æ—Å–ªe–¥–Ωe–≥–æ –∞–∫—Ç–∏–≤a —É—áac—Ç–Ω–∏–∫a –∏ —Åoc—Ç–æ—è–Ω–∏—è –ø–µpc–æ–Ω–∞–∂a
3) —É—Ä–æ–≤–Ω—è (–∑–∞–≤–∏—Å–∏—Ç o—Ç o–ø—ã—Ça) - —áe–º –±–æ–ª—å—àe —Ép–æ–≤e–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ c–∏–ª–∞ —Ép–æ–≤–Ω—è
4) —É–¥–∞—á–∏, –∫a–∂–¥—ã–π p–∞–∑ o–ø—Äe–¥e–ª—èe—Ç—Å—è c–ª—É—áa–π–Ω—ã–º –æ–±p–∞–∑o–º, –Ω–æ –Ωe –±o–ª—å—à–µ 15% o—Ç –æ–±—â–µ–π c–∏–ª—ã
—Ço—Ç, —É –∫o–≥o –∏—Ç–æ–≥–æ–≤a—è —Å–∏–ªa –±–æ–ª—å—àe, –ø–æ–±–µ–¥–∏–ª!
–¢a–∫–∂–µ p–∞–∑ –≤ —á–∞c –øep—Åo–Ω–∞–∂ –º–æ–∂–µ—Ç —É—Å—Ç—Ä–∞–∏–≤a—Ç—å —Äa–Ω–¥–æ–º –¥—É—ç–ª—å, –¥–µ–ª–∞—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ –≤—ã–∑—ã–≤a—è —Å–ª—É—áa–π–Ω–æ–≥–æ –ø–µ—Äc–æ–Ω–∞–∂a —Å–ª—É—á–∞–π–Ω–æ–π –¥—Ä—É–≥–æ–π –≥–∏–ª—å–¥–∏–∏ –Ω–∞ –¥—É—ç–ª—å, ec–ª–∏ –≤—ã–∏–≥p—ã–≤–∞e—Ç - –ø–æ–ª—É—á–∞–µ—Ç –≥–æ–ª–¥—É, —Äa–≤–Ω—É—é —Å—Ça–≤–∫–µ, –∏–Ωa—á–µ —Ç–µp—è–µ—Ç —Å—Ço–ª—å–∫o –∂e –≥–æ–ª–¥—ã(–∞ —Ç–∞–∫–∂–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –¥—É—ç–ª–∏ - –¥—É—ç–ª—å —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–π –≥–∏–ª—å–¥–∏–∏(–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å, –Ω–æ —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ–π –¥—É—ç–ª–∏).

–û–ø—ã—Ç, –Ω—É–∂–Ω—ã–π –¥–ª—è —Ép–æ–≤–Ω—è, –ºo–∂–Ωo –øo–ª—É—á–∏—Ç—å —É—á–∞c—Ç–≤—É—è –≤ –¥—É—ç–ª—è—Ö, —á–µ–º –±–æ–ª—å—à–µ p–∞–∑–Ω–∏—Üa –≤ c–∏–ª–µ –ø—Äo—Ç–∏–≤–Ω–∏–∫o–≤, —Ç–µ–º –±–æ–ª—å—à–µ –øo–ª—É—á–∏—Ç c–ª–∞–±–µ–π—à–∏–π –∏ —Çe–º –ºe–Ω—å—à–µ –øo–ª—É—á–∏—Ç c–∏–ª—å–Ω–µ–π—à–∏–π. –û–ø—ã—Ç –ø–æ–≤—ã—à–∞e—Ç —Ép–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ –ø–µpco–Ω–∞–∂a, a —Ép–æ–≤–µ–Ω—å –≤ —Å–ªe–¥—É—é—â—É—é o—áep–µ–¥—å –øo–≤—ã—à–∞e—Ç –ª–∏–º–∏—Ç –ºa–∫—Å–∏–ºa–ª—å–Ωo–π c—Ça–≤–∫–∏ –≤ "—Ä–∞–Ω–¥o–º –¥—É—ç–ª–∏" a —Ça–∫–∂e –¥ae—Ç –≤–∞–º –¥o–øo–ª–Ω–∏—Çe–ª—å–Ω—É—é —Å–∏–ª—É.`,
                    },
                    execute: (chat, message, command) => message.setTitle(command.messageTemplate.title).send(),
                    web: {},
                },
                {
                    name: 'showChat',
                    check: {
                        args: /^–≥–∏–ª—å–¥–∏—è/i,
                    },
                    commandList: {
                        name: '–≥–∏–ª—å–¥–∏—è',
                        description: '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∏–ª—å–¥–∏–∏ —á–∞—Ç–∞',
                    },
                    vip: {
                        usages: 10,
                    },
                    messageTemplate: {
                        title: '–≥–∏–ª—å–¥–∏—è "#{0}":\n' +
                        '(—Å–∏–ª–∞ –∏ —É—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)\n' +
                        '—Å–∏–ª–∞: üí™ #{1}\n' +
                        '—É—Ä–æ–≤–µ–Ω—å: üéì #{2}\n' +
                        '–∫–∞–∑–Ω–∞: üí∞ #{3}\n' +
                        '—Ä–∞–Ω–≥: &#128285; #{4}',
                    },
                    web: {},
                },
                {
                    name: 'showUsers',
                    check: {
                        args: /^–ø–µ—Ä—Å–æ–Ω–∞–∂–∏/i,
                    },
                    commandList: {
                        name: '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏',
                        description: '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ç–µ–∫—É—â–µ–π –≥–∏–ª—å–¥–∏–∏',
                    },
                    vip: {
                        usages: 10,
                    },
                    messageTemplate: {
                        title: '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≥–∏–ª—å–¥–∏–∏ "#{0}":\n' +
                        '(üî∏ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ üí§ –Ω–µ—Ç, üí™  —Å—É–º–º–∞—Ä–Ω–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∏–ª–∞, üí∞ –≥–æ–ª–¥–∞, üéì —É—Ä–æ–≤–µ–Ω—å, &#128285; –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ)',
                        body: '#{0}:\n #{1} | üí™ #{2} | üí∞ #{3} | üéì #{4} | &#128285; #{5} | #{6} (#{7}%)',
                        activeText: 'üî∏',
                        notActiveText: 'üí§',
                    },
                    web: {},
                },
                {
                    name: 'userInfo',
                    check: {
                        args: /^–ø–µ—Ä—Å–æ–Ω–∞–∂(?: ([a-z–∞-—è—ë]+? ?[a-z–∞-—è—ë]*?|\d{4,}))?$/i
                    },
                    commandList: {
                        name: '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ',
                        usage: '–ø–µ—Ä—Å–æ–Ω–∞–∂ (–∏–º—è)',
                        description: '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ',
                    },
                    vip: {
                        usages: 20,
                    },
                    messageTemplate: {
                        title: '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ #{0}:\n' +
                        '—Å–æ—Å—Ç–æ—è–Ω–∏–µ: #{1} (#{2}%)\n' +
                        '–≥–æ–ª–¥–∞: üí∞ #{3}\n' +
                        '—É—Ä–æ–≤–µ–Ω—å: üéì #{4}\n' +
                        '–æ–ø—ã—Ç: #{5} / #{6} EXP\n' +
                        '—Ä–∞–Ω–≥: &#128285; #{7}\n' +
                        '—Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:',
                        body: '‚Ä¢ #{0}: #{1} #{2} (üí™ #{3})',
                        end: '–¥—É—ç–ª—å: #{0}\n—Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—å: #{1}',
                    },
                    web: {
                        filter: (props, chat, message) => ({
                            user: {
                                type: 'select',
                                options: {
                                    placeholder: '—É—á–∞—Å—Ç–Ω–∏–∫–∏',
                                },
                                data: chat.users.map(id => ({
                                    label: chat.userNames[id].fullName,
                                    value: id,
                                    default: id === message.user,
                                })),
                            },
                        }),
                        output: props => `–ø–µ—Ä—Å–æ–Ω–∞–∂ ${props && props.user}`,
                    }
                },
                {
                    name: 'duel',
                    check: {
                        args: /^–¥—É—ç–ª—å ([a-z–∞-—è—ë]+? ?[a-z–∞-—è—ë]*?|\d{4,})$/i,
                    },
                    vip: {
                        usages: 7,
                    },
                    commandList: {
                        name: '–¥—É—ç–ª—å',
                        usage: '–¥—É—ç–ª—å (–∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞)',
                        description: '–≤—ã–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –¥—É—ç–ª—å',
                    },
                    messageTemplate: {
                        startDuel: '#{1}, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –¥—É—ç–ª—å —Å #{0}? (–Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥—É—ç–ª—å)',
                        failUser: '–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –∏–º–µ–Ω–µ–º #{0} –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                        failTimeout: '#{0}, –ø–æ—Ö–æ–∂–µ #{1} –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª –±–∏—Ç—å—Å—è —Å –≤–∞–º–∏!',
                        failRequest: '#{0}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—É—ç–ª—å!',
                        failPeriod: '#{0}, –≤—ã —É–∂–µ –≤—ã–∑—ã–≤–∞–ª–∏ –∫–æ–≥–æ-—Ç–æ –Ω–∞ –¥—É—ç–ª—å –≤ —ç—Ç–æ–º —á–∞—Å—É! (–æ—Å—Ç–∞–ª–æ—Å—å #{1} –º–∏–Ω.)',
                        end: '\n#{0} –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ –ø–æ–±–µ–¥—É &#128285; #{1} —Ä–∞–Ω–≥–∞ –∏ #{2} –æ–ø—ã—Ç–∞, #{3} —Ç–µ—Ä—è–µ—Ç –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ &#128285; #{4} —Ä–∞–Ω–≥–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç #{5} –æ–ø—ã—Ç–∞',
                    },
                },
                {
                    name: 'randomDuel',
                    check: {
                        args: /^—Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—å(?: (\d+))?$/i,
                    },
                    vip: {
                        usages: 7,
                    },
                    commandList: {
                        name: '—Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—å',
                        usage: '—Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—å {—Å—Ç–∞–≤–∫–∞ –≥–æ–ª–¥—ã}',
                        description: '–≤—ã–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –¥—É—ç–ª—å',
                    },
                    messageTemplate: {
                        failRate: '–¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (üéì #{0}) —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ #{1} üí∞',
                        failGold: '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–¥—ã –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏ (—É –≤–∞—Å –µ—Å—Ç—å #{0} üí∞)',
                        failPeriod: '#{0}, –≤—ã —É–∂–µ –≤—ã–∑—ã–≤–∞–ª–∏ –∫–æ–≥–æ-—Ç–æ –Ω–∞ —Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—å –≤ —ç—Ç–æ–º —á–∞—Å—É! (–æ—Å—Ç–∞–ª–æ—Å—å #{1} –º–∏–Ω.)',
                        failChat: '–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–Ω–¥–æ–º –¥—É—ç–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                        endWinner: '\n#{0} –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ —Å–ª—É—á–∞–π–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º ([id#{1}|#{2}]) #{3} –≥–æ–ª–¥—ã, &#128285; #{4} —Ä–∞–Ω–≥–∞ –∏ #{5} –æ–ø—ã—Ç–∞',
                        endLooser: '\n#{0} —Ç–µ—Ä—è–µ—Ç –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ ([id#{1}|#{2}]) #{3} –≥–æ–ª–¥—ã, &#128285; #{4} —Ä–∞–Ω–≥–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç #{5} –æ–ø—ã—Ç–∞',
                        failAuction: '–Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—å –≤–æ –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞!',
                    },
                },
                {
                    name: 'chatsDuel',
                    check: {
                        args: /^–±–∏—Ç–≤–∞ –≥–∏–ª—å–¥–∏–π(?: (\d+))?/i,
                    },
                    commandList: {
                        name: '–±–∏—Ç–≤–∞ –≥–∏–ª—å–¥–∏–π',
                        usage: '–±–∏—Ç–≤–∞ –≥–∏–ª—å–¥–∏–π {–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≥–æ–ª–¥—ã}',
                    },
                    vip: {
                        usages: 3,
                    },
                    commandAccess: {
                        defaultStatus: 9,
                    },
                    messageTemplate: {
                        failRate: '–≤ –∫–∞–∑–Ω–µ –≥–∏–ª—å–¥–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–¥—ã –¥–ª—è —Ç–∞–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ (–≤ –∫–∞–∑–Ω–µ #{0} üí∞)',
                        failRateLvl: '–¥–ª—è —É—Ä–æ–≤–Ω—è –≤–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏ (üéì #{0}) —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ #{1} üí∞',
                        failPeriod: '–±–∏—Ç–≤–∞ –≥–∏–ª—å–¥–∏–π —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å –≤ —ç—Ç–æ–º —á–∞—Å—É! (–æ—Å—Ç–∞–ª–æ—Å—å #{0} –º–∏–Ω.)',
                        failChat: '–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –±–∏—Ç–≤—ã –≥–∏–ª—å–¥–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                        failAuction: '–Ω–µ–ª—å–∑—è —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–∏—Ç–≤—É –≥–∏–ª—å–¥–∏–π –≤–æ –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞!',
                        title: '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∏–ª—å–¥–∏—è—Ö –±–∏—Ç–≤—ã:\n' +
                        '–≤–∞—à–∞ –≥–∏–ª—å–¥–∏—è "#{0}" (##{1}):\n' +
                        '- —Å—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: üí™ #{2}\n' +
                        '- –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: üí™ #{3}\n' +
                        '- —Ä–∞–Ω–≥: &#128285; #{4}\n' +
                        '\n–≥–∏–ª—å–¥–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ "#{5}" (##{6}):\n' +
                        '- —Å—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: üí™ #{7}\n' +
                        '- –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: üí™ #{8}\n' +
                        '- —Ä–∞–Ω–≥: &#128285; #{9}\n',
                        endWin: '–≤–∞—à–∞ –≥–∏–ª—å–¥–∏—è –ø–æ–±–µ–∂–¥–∞–µ—Ç, –∏ –ø–æ–ª—É—á–∞–µ—Ç #{0} üí∞ –∑–∞ –ø–æ–±–µ–¥—É –∏ #{1} üí∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—É—á–∞—é—Ç #{2} –æ–ø—ã—Ç–∞',
                        endLoose: '–≤–∞—à–∞ –≥–∏–ª—å–¥–∏—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–æ—â—Ä–∏—Ç–µ–ª—å–Ω—ã–µ #{0} üí∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ —Ç–µ—Ä—è–µ—Ç #{1} üí∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—É—á–∞—é—Ç #{2} –æ–ø—ã—Ç–∞',
                    },
                },
                {
                    name: 'chatsTop',
                    check: {
                        args: '—Ç–æ–ø –≥–∏–ª—å–¥–∏–π',
                    },
                    commandList: {
                        name: '—Ç–æ–ø –≥–∏–ª—å–¥–∏–π',
                        description: '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –≥–∏–ª—å–¥–∏–π –ø–æ —Ä–∞–Ω–≥—É',
                    },
                    messageTemplate: {
                        title: '—Ç–æ–ø –≥–∏–ª—å–¥–∏–π –ø–æ —Ä–∞–Ω–≥—É:',
                        body: '#{0}. "#{1}" (##{2}) - —Ä–∞–Ω–≥ &#128285; #{3}',
                        end: '...\n#{0}. "#{1}" (#{2}) - —Ä–∞–Ω–≥ &#128285; #{3}',
                    }
                },
                {
                    name: 'usersTop',
                    check: {
                        args: '—Ç–æ–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
                    },
                    commandList: {
                        name: '—Ç–æ–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
                        description: '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ —Ä–∞–Ω–≥—É',
                    },
                    messageTemplate: {
                        title: '—Ç–æ–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ —Ä–∞–Ω–≥—É:',
                        body: '#{0}. [id#{1}|#{2}] - —Ä–∞–Ω–≥ &#128285; #{3}',
                        end: '...\n#{0}. [id#{1}|#{2}] - —Ä–∞–Ω–≥ &#128285; #{3}',
                    },
                },
                {
                    name: 'getSalary',
                    check: {
                        args: /^–≤—ã–¥–∞—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ/i,
                    },
                    commandList: {
                        name: '–≤—ã–¥–∞—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ',
                        description: '–≤—ã–¥–∞–µ—Ç –∂–∞–ª–æ–≤–∞–Ω–∏–µ (–≥–æ–ª–¥—É) –∞–∫—Ç–∏–≤–Ω—ã–º –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ –∏–∑ –∫–∞–∑–Ω—ã –≥–∏–ª—å–¥–∏–∏',
                    },
                    vip: {
                        usages: 4,
                    },
                    commandAccess: {
                        defaultStatus: 9,
                    },
                    messageTemplate: {
                        title: '–º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞ –ø–æ–¥–µ–ª–µ–Ω–æ –∂–∞–ª–æ–≤–∞–Ω–∏–µ –≥–æ–ª–¥—ã –∏–∑ –∫–∞–∑–Ω—ã –ø–æ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—Å–µ–≥–æ #{0} üí∞, –≤ –∫–∞–∑–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å #{1} üí∞):\n' +
                        '(–≤—ã–¥–∞–Ω–æ / –≤—Å–µ–≥–æ)',
                        body: '#{0}: +#{1} üí∞ / #{2} üí∞',
                        titleFail: '–∂–∞–ª–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–¥–∞–≤–∞–ª–æ—Å—å –≤ —ç—Ç–æ–º —á–∞—Å—É! (–æ—Å—Ç–∞–ª–æ—Å—å #{0} –º–∏–Ω.)',
                        failGold: '–Ω–µ—á–µ–≥–æ –≤—ã–¥–∞–≤–∞—Ç—å, –∫–∞–∑–Ω–∞ –≥–∏–ª—å–¥–∏–∏ –ø—É—Å—Ç–∞! —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–∑–Ω—É, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –±–∏—Ç–≤–∞—Ö –≥–∏–ª—å–¥–∏–π (–∫–æ–º–∞–Ω–¥–∞ "–±–∏—Ç–≤–∞ –≥–∏–ª—å–¥–∏–π")',
                        failAuction: '–Ω–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞!',
                    },
                    // web: {
                    //     type: "action",
                    //     submitText: '–≤—ã–¥–∞—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ',
                    //     changes: {
                    //         module: this.constructor.name,
                    //         command: [
                    //             'userInfo',
                    //             'showUsers',
                    //         ],
                    //     },
                    // }
                },
                {
                    name: 'startAuction',
                    check: {
                        args: /^–Ω–∞—á–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω(?: (\d+))?$/i,
                    },
                    commandList: {
                        name: '–Ω–∞—á–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω',
                        usage: '–Ω–∞—á–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω {–≤–ª–æ–∂–µ–Ω–∏–µ –≥–æ–ª–¥—ã –∏–∑ –∫–∞–∑–Ω—ã}',
                        description: `–Ω–∞—á–∏–Ω–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –º–æ–≥—É—Ç –ø–æ—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –∑–∞ –ø–æ–∫—É–ø–∫—É —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, (–º–æ–∂–Ω–æ –≤–ª–æ–∂–∏—Ç—å –≥–æ–ª–¥—É –∏–∑ –∫–∞–∑–Ω—ã –≥–∏–ª—å–¥–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º - ${this._getMaxAuctionCost()} üí∞)`,
                    },
                    vip: {
                        usages: 3,
                    },
                    commandAccess: {
                        defaultStatus: 9,
                    },
                    messageTemplate: {
                        title: '–∞—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø–∏—à–∏—Ç–µ "—Å—Ç–∞–≤–∫–∞ (–Ω–æ–º–µ—Ä –ª–æ—Ç–∞) (–≥–æ–ª–¥–∞)", –Ω–∞–ø—Ä–∏–º–µ—Ä - "—Å—Ç–∞–≤–∫–∞ 1 50" \n' +
                        '—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π\n' +
                        '–∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Å—Ç–∞–≤–æ–∫, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —É –Ω–µ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç –≥–æ–ª–¥—ã\n' +
                        `–∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞–º–µ–Ω—è—é—Ç —Å—Ç–∞—Ä—ã–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ - ${this.config.auctionDuration} –º–∏–Ω.\n` +
                        '–≤ –∞—É–∫—Ü–∏–æ–Ω –≤–ª–æ–∂–µ–Ω–æ #{0} üí∞ –∏–∑ –∫–∞–∑–Ω—ã –≥–∏–ª—å–¥–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è' +
                        '\n—Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤:',
                        titleDuration: '–∞—É–∫—Ü–∏–æ–Ω —É–∂–µ –∏–¥–µ—Ç, —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤:\n#{0}\n\n—Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏:',
                        durationEmpty: '—Å—Ç–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç',
                        body: '–ª–æ—Ç ‚Ññ#{0}: #{1} #{2} (üí™ #{3}) - #{4} üí∞ (–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞)',
                        end: '\n–ø–æ–µ—Ö–∞–ª–∏!',
                        finalTitle: '–∞—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç, –∏—Ç–æ–≥–∏:',
                        finalBody: '#{0} –ø–æ–ª—É—á–∞–µ—Ç #{1} #{2} (üí™ #{3}) –∑–∞ #{4} üí∞',
                        finalInfoEmpty: '–∞—É–∫—Ü–∏–æ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, —Å—Ç–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç',
                        finalInfoTitle: '–∞—É–∫—Ü–∏–æ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏:',
                        finalInfoBody: '#{0}: –ª–æ—Ç - #{1}, —Å—Ç–∞–≤–∫–∞ - #{2} üí∞',
                        failEmpty: '–Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ',
                        failPeriod: '–∞—É–∫—Ü–∏–æ–Ω —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –≤ —ç—Ç–æ–º —á–∞—Å—É! (–æ—Å—Ç–∞–ª–æ—Å—å #{0} –º–∏–Ω.)',
                        failDuration: '–∞—É–∫—Ü–∏–æ–Ω —É–∂–µ –∏–¥–µ—Ç!',
                        failRate: '–≤ –∫–∞–∑–Ω–µ –≥–∏–ª—å–¥–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–¥—ã –¥–ª—è —Ç–∞–∫–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω (–≤ –∫–∞–∑–Ω–µ #{0} üí∞)',
                    },
                },
                {
                    name: 'timers',
                    check: {
                        args: '–∏–≥—Ä–∞ –æ—Ç–∫–∞—Ç—ã',
                    },
                    commandList: {
                        name: '–∏–≥—Ä–∞ –æ—Ç–∫–∞—Ç—ã',
                        description: '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –¥—É—ç–ª–∏, —Ä–∞–Ω–¥–æ–º –¥—É—ç–ª–∏ –∏ –±–∏—Ç–≤—É –≥–∏–ª—å–¥–∏–π',
                    },
                    messageTemplate: {
                        title: '–æ—Ç–∫–∞—Ç—ã –∏–≥—Ä—ã –≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏:\n' +
                        '–∞—É–∫—Ü–∏–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: #{0} –º–∏–Ω.\n' +
                        '–±–∏—Ç–≤–∞ –≥–∏–ª—å–¥–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑: #{1} –º–∏–Ω.\n' +
                        '–≤—ã–¥–∞—á–∞ –∂–∞–ª–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑: #{2} –º–∏–Ω.\n\n' +
                        '–æ—Ç–∫–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–¥—É—ç–ª—å | —Ä–∞–Ω–¥–æ–º –¥—É—ç–ª—å):',
                        body: '#{0}: #{1} | #{2}',
                    },
                    web: {},
                },
            ]
        };
    }

    _init(bot) {
        this.chatAuction = {};
        this.salary = {};
        this.chatDuels = {};
        return super._init(bot);
    }

    /**
     *
     * @return {Array<String>}
     */
    get equipmentNames() {
        return Object.keys(this.equipmentInfo);
    }

    /**
     *
     * @return {{helmet: {label: string, names: Array<String>, icon:
     *     string}, armor: {label: string, names: Array<String>, icon:
     *     string}, weapon: {label: string, names: Array<String>, icon:
     *     string}}}
     */
    get equipmentInfo() {
        return {
            helmet: {
                label: '—à–ª–µ–º',
                names: ['—à–ª–µ–º', '–∫–∞—Å–∫–∞', '—à–ª—è–ø–∞', '—à–ª–µ–º–æ—Ñ–æ–Ω', '–º–∏—Å—é—Ä–∫–∞', '—à–ª–µ–º–∞–∫', '—É–±–æ—Ä', '–ø–∞–Ω–∞–º–∫–∞'],
                icon: '‚õë',
                type: 'helmet',
            },
            armor: {
                label: '–±—Ä–æ–Ω—è',
                names: ['–±—Ä–æ–Ω—è', '–ª–∞—Ç—ã', '–ø–∞–Ω—Ü–∏—Ä—å', '–±—Ä–æ–Ω—å', '–æ–¥–µ–∂–∫–∞', '–¥–æ—Å–ø–µ—Ö–∏', '–∫–∏—Ä–∞—Å–∞', '–ø–æ–∫—Ä–æ–≤'],
                icon: 'üõ°',
                type: 'armor',
            },
            weapon: {
                label: '–æ—Ä—É–∂–∏–µ',
                names: ['–º–µ—á', '–±—É–ª–∞–≤–∞', '—Ç–æ–ø–æ—Ä', '–ø–∞–ª–∫–∞', '–¥—É–±–∏–Ω–∞', '–∫–∏–Ω–∂–∞–ª', '–∑–∞—Ç–æ—á–∫–∞', '—Ä—É–±–∞–Ω–æ–∫'],
                icon: '‚öî',
                type: 'weapon',
            },
        }
    }

    /**
     *
     * @return {Array<String>}
     */
    get stateLabels() {
        return [
            'ü§¢ –µ–ª–µ –∂–∏–≤ ',
            'ü§ï —Å –±—É–¥—É–Ω–∞',
            'üò¨ —Å—Ç–æ—è—Ç—å –º–æ–∂–µ—Ç',
            'üòê –ø–æ—á—Ç–∏ –æ–ø–∞—Å–µ–Ω',
            'üòÄ –∫–∞–∫ –æ–≥—É—Ä—á–∏–∫',
            'ü§ñ —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä',
        ];
    }

    /**
     *
     * @return {{helmet: {name: string, power: number}, armor: {name: string, power: number}, weapon: {name: string, power: number}}}
     */
    get defaultEquipment() {
        return {
            helmet: {
                name: '–Ω–∏–∫—á–µ–º–Ω—ã–π —à–ª–µ–º–∏–∫',
                power: 1,
            },
            armor: {
                name: '–Ω–∏–∫—á–µ–º–Ω—ã–π –±—Ä–æ–Ω–∏–∫',
                power: 1,
            },
            weapon: {
                name: '–Ω–∏–∫—á–µ–º–Ω—ã–π –º–µ—á',
                power: 1,
            },
        }
    }

    /**
     *
     * @return {{helmet: {name: string, power: number}, armor: {name: string, power: number}, weapon: {name: string, power: number}}}
     */
    get defaultAdminEquipment() {
        return {
            helmet: {
                name: '—à–ª–µ–º –≤–µ–ª–∏–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤',
                power: this.config.maxEquipmentPower,
            },
            armor: {
                name: '–±—Ä–æ–Ω—å –≤–µ–ª–∏–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤',
                power: this.config.maxEquipmentPower,
            },
            weapon: {
                name: '–º–µ—á –≤–µ–ª–∏–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤',
                power: this.config.maxEquipmentPower,
            },
        }
    }

    getStateLabel(state) {
        state = state / 101;
        return this.stateLabels[Math.floor(state * this.stateLabels.length)];
    }

    _getNeededExpToLvl(lvl) {
        let exp = 0;
        for (let i = 0; i < lvl; i++) {
            exp += i * this.config.expToLevel;
        }
        return exp;
    }

    _getMaxAuctionCost() {
        return this.config.auctionMaxCostByPower * this.config.maxEquipmentPower;
    }

    /**
     *
     * @param {GameUserInfo} userInfo
     * @param {Number} [winInc]
     * @param {Number} [looseInc]
     * @return {Number}
     * @private
     */
    _getUserRating(userInfo, winInc = 0, looseInc = 0) {
        let duelsWin = userInfo.duelsWin + winInc;
        let duelsLoose = userInfo.duelsLoose + looseInc;
        return Math.round(10 * Math.sqrt(Math.max((duelsWin - duelsLoose) * 10, 1))) || 1;
    }

    /**
     *
     * @param {GameChatInfo} chatInfo
     * @param {Number} [winInc]
     * @param {Number} [looseInc]
     * @return {Number}
     * @private
     */
    _getChatRating(chatInfo, winInc = 0, looseInc = 0) {
        let duelsWin = chatInfo.duelsWin + winInc;
        let duelsLoose = chatInfo.duelsLoose + looseInc;
        return Math.round(10 * Math.sqrt(Math.max((duelsWin - duelsLoose) * 10, 1))) || 1;
    }

    /**
     *
     * @param {Array<GameUserInfo>} usersInfo
     * @return {Number}
     * @private
     */
    _getUsersAvgLvl(usersInfo) {
        let sumLvl = usersInfo.reduce((lvl, userInfo) => lvl + (userInfo.lvl || 1), 0);
        return Math.round(sumLvl / usersInfo.length) || 0;
    }

    _getDuelExp(usersInfo) {
        return Math.pow(this._getUsersAvgLvl([].concat(usersInfo)), 0.6) * 5 * this.config.expFromDuel;
    }

    /**
     *
     * @param {GameUserInfo} userInfo
     * @param {Number} chatId
     * @return {Promise.<GameUserInfo>}
     * @private
     */
    _getUserState(userInfo, chatId) {
        if (!chatId) {
            userInfo.active = userInfo.lastActive = 0;
            userInfo.state = 0;
            return Promise.resolve(userInfo);
        }
        let userId = userInfo.userId;
        let fromDate = new Date(Date.now() - this.config.userStateByHours * 36e5);
        fromDate.setMinutes(59, 59, 999);
        return UserHourStatistics.find({chatId, userId})
            .betweenDates(fromDate)
            .sort('-date.time')
            .exec()
            .then(docs => {
                if (!docs.length) {
                    userInfo.active = userInfo.lastActive = 0;
                    userInfo.state = 0;
                    return userInfo;
                }
                let reduceFunc = (to, from) => {
                    return to + from.countSymbols;
                };
                let fromDocs = docs.filter(doc => doc.date.time > Date.now() - this.config.userStateFromHours * 36e5)
                    .slice(0, this.config.userStateFromHours);
                let byStatus = docs.reduce(reduceFunc, 0) || 0;
                let fromStatus = fromDocs.reduce(reduceFunc, 0) || 0;
                userInfo.active = byStatus / this.config.userStateByHours;
                userInfo.lastActive = fromStatus / this.config.userStateFromHours;
                let status = this.config.defaultUserState / 100 * userInfo.lastActive / userInfo.active;
                if (status > 1) status = 1;
                status = Math.round(status * 100) || 0;
                userInfo.state = status;
                return userInfo;
            })
    }

    /**
     *
     * @param {GameUserInfo} userInfo
     * @return {GameUserInfo}
     * @private
     */
    _getPower(userInfo) {
        userInfo.activePower = Math.sqrt(userInfo.active || 0) * this.config.activePowerRatio * userInfo.state / 100;
        userInfo.activePower = Math.round(userInfo.activePower);
        userInfo.lvlPower = Math.pow(userInfo.lvl || 1, this.config.lvlPowerRatio);
        userInfo.lvlPower = Math.round(userInfo.lvlPower);
        userInfo.fullPower = (userInfo.equipmentPower || 0) + userInfo.activePower + userInfo.lvlPower;
        return userInfo;
    }

    /**
     *
     * @param chat
     * @param userId
     * @return {Promise.<*>}
     * @private
     */
    _getUserInfo(chat, userId) {
        let chatId = chat && chat.id;
        return GameUserInfo.find({userId}).exec().then(docs => {
            let doc;
            if (docs.length > 1) {
                docs.sort(
                    (a, b) =>
                        this.equipmentNames.reduce((res, name) => res + b[name].power - a[name].power, 0)
                );
                docs.slice(1).map(doc => doc.remove());
            }
            doc = docs[0];
            if (!doc) doc = new GameUserInfo({userId});
            /**
             *
             * @type {GameUserInfo}
             */
            let userInfo = Object.assign({}, doc._doc);
            userInfo.equipmentPower = 0;
            let defaultEquipment = this.bot.admins.includes(userId) ? this.defaultAdminEquipment : this.defaultEquipment;
            this.equipmentNames.map(name => {
                if (!userInfo[name].power) userInfo[name] = defaultEquipment[name];
                userInfo.equipmentPower += userInfo[name].power;
            });
            userInfo.lvl = 0;
            while (!(this._getNeededExpToLvl(userInfo.lvl + 1) > userInfo.exp)) userInfo.lvl++;
            userInfo.rating = this._getUserRating(userInfo);
            userInfo.name = chat && chat.userNames[userId].fullName || !userInfo.name && userId;
            return this._getUserState(userInfo, chatId).then(userInfo => this._getPower(userInfo));
        })
    }

    /**
     *
     * @param {Chat} chat
     * @param {Array} users
     */
    _getAllUsersInfo(chat, users = (chat.users || [])) {
        return promiseFactory.allAsync(users.map(userId => this._getUserInfo(chat, userId)));
    }

    /**
     *
     * @param type
     * @param powerRatio
     * @return {*}
     * @private
     */
    _createEquipment(type, powerRatio = Math.random()) {
        let eq = this.equipmentInfo[type] || this.equipmentInfo[Object.keys(this.equipmentInfo)[0]];
        let namesAbout = ['–≤–µ–ª–∏–∫–∏—Ö', '–æ–≥–Ω–µ–Ω–Ω—ã—Ö', '–º—É—Å–∫—É–ª–∏—Å—Ç—ã—Ö', '–º–∞–≥–∏—á–µ—Å–∫–∏—Ö', '–±–µ—Å—Å—Ç—Ä–∞—à–Ω—ã—Ö', '–Ω–µ–ø–æ–±–µ–¥–∏–º—ã—Ö', '–ø–∞–Ω–∏—á–µ—Å–∫–∏—Ö', '–¥—Ä–∞–π–≤–æ–≤—ã—Ö', '—á–µ—Ç–∫–∏—Ö', '–Ω–∞–¥–µ–∂–Ω—ã—Ö', '—Ç–∞–π–Ω—ã—Ö', '–æ—á–µ–≤–∏–¥–Ω—ã—Ö', '—è–¥–µ—Ä–Ω—ã—Ö', '–æ—Å–æ–±–µ–Ω–Ω—ã—Ö', '–∫—Ä—É—Ç—ã—Ö', '–∂–µ—Å—Ç–æ–∫–∏—Ö', '–ø–µ—á–∞–ª—å–Ω—ã—Ö', '–¥–æ—Å—Ç—É–ø–Ω—ã—Ö', '—Å—É—Ä–æ–≤—ã—Ö', '–±–µ—à–µ–Ω—ã—Ö', '–ª—å–≤–∏–Ω—ã—Ö'];
        let namesEnd = ['–¥—Ä–∞–∫–æ–Ω–æ–≤', '—ç–ª—å—Ñ–æ–≤', '–±–µ—Ä—Å–µ—Ä–∫–æ–≤', '–º–∞—Å—Ç–µ—Ä–æ–≤', '–≤–æ—Ä–æ–≤', '–ø–æ–±–æ–µ–≤', '—É–¥–∞—Ä–æ–≤', '–≤–æ–π–Ω', '–±–∏—Ç–≤', '–∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–π', '–≤–æ–∏–Ω–æ–≤', '–∞–ª–∫–æ–≥–æ–ª–∏–∫–æ–≤', '–±–µ—Ä–µ–≥–æ–≤', '–æ—Å—Ç—Ä–æ–≤–æ–≤', '–º–Ω–æ–≥–æ–Ω–æ–∂–µ–∫', '—Å—Ç—Ä–∞—É—Å–æ–≤', '—Å–æ—Å–µ–Ω', '–ø–∏–Ω–∫–æ–≤', '–Ω–∞–≥—Ä–∞–¥', '–±–µ–¥', '–ø–æ–±–µ–¥', '—Ü–≤–µ—Ç–∫–æ–≤', '–∫–∞–Ω–¥–µ–ª—è–±—Ä–æ–≤', '–ø–∞—Ä–∞—à'];
        let randomItem = array => array[Math.floor(Math.random() * array.length)];
        let name = randomItem(eq.names) + ' ' + randomItem(namesAbout) + ' ' + randomItem(namesEnd);
        powerRatio = Math.max(Math.min(powerRatio, 1), 0);
        let ratio = powerRatio + (Math.random() * Math.random() * (1 - powerRatio));
        let power = Math.ceil(ratio * (this.config.maxEquipmentPower - 1)) + 1;
        return Object.assign({}, eq, {name, power});
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    showChat(chat, message, command) {
        return promiseFactory.allAsync([
            GameChatInfo.findOne({chatId: chat.id}).exec(),
            this._getAllUsersInfo(chat),
        ]).then(([doc, usersInfo]) => {
            if (!doc) doc = new GameUserInfo({chatId: chat.id});
            let allPower = usersInfo.reduce(
                (power, userInfo) => power + userInfo.equipmentPower + userInfo.lvlPower,
                0,
            );
            let avgPower = Math.round(allPower / usersInfo.length);
            return message.setTitleTemplate(
                command.messageTemplate.title,
                chat.title,
                avgPower,
                this._getUsersAvgLvl(usersInfo),
                doc.gold,
                this._getChatRating(doc),
            ).send();
        })
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    getSalary(chat, message, command) {
        if (this.salary[chat.id]) return;
        if (this.chatAuction[chat.id]) return message.setTitle(command.messageTemplate.failAuction).send();
        this.salary[chat.id] = true;
        return GameChatInfo.findOne({chatId: chat.id}).exec().then(doc => {
            if (!doc) doc = new GameChatInfo({chatId: chat.id});
            if (Date.now() - doc.lastSalary < this.config.salaryPeriod) {
                let minToSalary = this.config.salaryPeriod - (Date.now() - doc.lastSalary);
                this.salary[chat.id] = false;
                return message.setTitleTemplate(command.messageTemplate.titleFail, Math.ceil(minToSalary / 6e4)).send();
            } else if (doc.gold <= 0) {
                this.salary[chat.id] = false;
                return message.setTitleTemplate(command.messageTemplate.failGold).send();
            }
            return this._getAllUsersInfo(chat).then(usersInfo => {
                let chatLvl = this._getUsersAvgLvl(usersInfo);
                usersInfo.map(userInfo => {
                    if (Date.now() - userInfo.lastSalary < this.config.salaryPeriod) {
                        userInfo.lastActive = Math.max(userInfo.lastActive - userInfo.lastSalaryActive, 0) || 0;
                    }
                });
                usersInfo = usersInfo.filter(userInfo => userInfo.lastActive);
                if (!usersInfo.length) {
                    this.salary[chat.id] = false;
                    return;
                }
                let allSalary = Math.min(
                    this.config.salaryByUser * usersInfo.length * Math.ceil(chatLvl * this.config.salaryFromChatLvlRatio),
                    doc.gold,
                );
                let balanceSalary = allSalary;
                let allActive = usersInfo.reduce((active, userInfo) => active + userInfo.lastActive, 0);
                let promises = [];
                usersInfo.sort((a, b) => b.lastActive - a.lastActive);
                usersInfo.map(userInfo => {
                    if (balanceSalary < 1) return;
                    userInfo.salary = Math.ceil(allSalary * userInfo.lastActive / allActive);
                    if (userInfo.salary > balanceSalary) userInfo.salary = balanceSalary;
                    balanceSalary -= userInfo.salary;
                    let data = {
                        $inc: {gold: userInfo.salary},
                        $set: {
                            lastSalary: new Date(),
                            lastSalaryActive: userInfo.lastActive,
                        },
                    };
                    if (Date.now() - userInfo.lastSalary < this.config.salaryPeriod) {
                        data.$set = {
                            lastSalary: userInfo.lastSalary,
                            lastSalaryActive: userInfo.lastActive + userInfo.lastSalaryActive,
                        }
                    }
                    promises.push(GameUserInfo.update({
                        userId: userInfo.userId,
                    }, data, {
                        upsert: true,
                    }));
                });
                usersInfo = usersInfo.filter(userInfo => userInfo.salary);
                doc.lastSalary = Date.now();
                doc.gold -= allSalary;
                promises.push(doc.save());
                return promiseFactory.allAsync(promises).then(() => {
                    this.salary[chat.id] = false;
                    return message.setTitleTemplate(command.messageTemplate.title, allSalary, doc.gold)
                        .setBodyTemplate(
                            command.messageTemplate.body,
                            n => chat.userNames[usersInfo[n].userId].fullName,
                            n => usersInfo[n].salary,
                            n => usersInfo[n].salary + usersInfo[n].gold
                        )
                        .setTemplateLength(usersInfo.length)
                        .send();
                })
            })
        })
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    showUsers(chat, message, command) {
        return this._getAllUsersInfo(chat).then(usersInfo => {
            usersInfo.sort((a, b) => b.equipmentPower + b.lvlPower - a.equipmentPower - a.lvlPower);
            return message.setTitleTemplate(command.messageTemplate.title, chat.title)
                .setBodyTemplate(
                    command.messageTemplate.body,
                    n => chat.userNames[usersInfo[n].userId].fullName,
                    n => usersInfo[n].lastActive
                        ? command.messageTemplate.activeText
                        : command.messageTemplate.notActiveText,
                    n => usersInfo[n].equipmentPower + usersInfo[n].lvlPower,
                    n => usersInfo[n].gold,
                    n => usersInfo[n].lvl,
                    n => usersInfo[n].rating,
                    n => this.getStateLabel(usersInfo[n].state),
                    n => usersInfo[n].state,
                )
                .setTemplateLength(usersInfo.length)
                .send();
        })
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    startAuction(chat, message, command) {
        let auctionInfo = this.chatAuction[chat.id];
        if (auctionInfo) {
            if (auctionInfo instanceof Object) {
                let info = auctionInfo.users.filter(userInfo => userInfo.rate);
                if (info.length) {
                    auctionInfo.setRatesToMessageBody(info, message);
                } else {
                    message.setBody(command.messageTemplate.durationEmpty)
                }
                return message.setTitleTemplate(command.messageTemplate.titleDuration, auctionInfo.ratesText).send()
            }
            return message.setTitleTemplate(command.messageTemplate.failDuration).send();
        }
        this.chatAuction[chat.id] = true;
        let [, auctionCost = 0] = command.check.args.exec(message.getCommandText());
        auctionCost = Math.min(auctionCost, this._getMaxAuctionCost());
        return GameChatInfo.findOne({chatId: chat.id}).exec().then(doc => {
            if (!doc) doc = new GameChatInfo({chatId: chat.id});
            if (Date.now() - doc.lastAuction < this.config.auctionPeriod) {
                let minToSalary = this.config.auctionPeriod - (Date.now() - doc.lastAuction);
                this.chatAuction[chat.id] = false;
                return message.setTitleTemplate(command.messageTemplate.failPeriod, Math.ceil(minToSalary / 6e4)).send();
            } else if (doc.gold < auctionCost) {
                this.chatAuction[chat.id] = false;
                return message.setTitleTemplate(command.messageTemplate.failRate, doc.gold);
            }

            return this._getAllUsersInfo(chat).then(usersInfo => {
                if (!usersInfo.length) {
                    this.chatAuction[chat.id] = false;
                    return;
                }
                let chatLvl = this._getUsersAvgLvl(usersInfo);

                let equipmentCountFromType = Math.ceil(this.config.auctionEquipmentByChatLvl * chatLvl);
                let equipmentPowerRatio = auctionCost / this._getMaxAuctionCost();
                let equipments = this.equipmentNames.reduce((eq, type) => {
                    return eq.concat(new Array(equipmentCountFromType)
                        .fill(type)
                        .map(type => this._createEquipment(type, equipmentPowerRatio)))
                }, []);
                equipments.map((eq, num) => {
                    let x = eq.power;
                    eq.minRate = Math.ceil(this.config.salaryByUser * (Math.pow(x, 2.2) * 1.2 - 1.5 * x - Math.random()));
                    eq.rate = eq.minRate - 1;
                    eq.slot = num;
                });
                let rateCount = 0;
                let setRatesToMessageBody = (users, message) => {
                    message
                        .setBodyTemplate(
                            command.messageTemplate.finalInfoBody,
                            n => chat.userNames[users[n].userId].fullName,
                            n => users[n].slot + 1,
                            n => users[n].rate
                        )
                        .setTemplateLength(users.length);
                };
                /**
                 *  @param {Message} newMessage
                 */
                let onMessage = (newMessage) => {
                    let check = /^\D{0,10}—Å—Ç–∞–≤–∫–∞\D{1,10}(\d+)\D{1,10}(\d+)/i;
                    if (!check.test(newMessage.getCommandText())) return;
                    let [, slot, rate] = check.exec(newMessage.getCommandText());
                    slot--;
                    let userInfo = usersInfo.filter(userInfo => userInfo.userId === newMessage.user)[0];

                    if (!userInfo || !equipments[slot] || userInfo.slot === slot && userInfo.rate >= rate
                        || userInfo.gold < rate || rate < equipments[slot].minRate) return;
                    userInfo.rate = rate;
                    userInfo.rateCount = rateCount++;
                    userInfo.slot = slot;
                    new this.bot.Message({peer: newMessage.peer})
                        .setTitle(`[id${userInfo.userId}| –ü—Ä–∏–Ω—è—Ç–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç ‚Ññ${userInfo.slot+1} –∑–∞ ${userInfo.rate} –≥–æ–ª–¥—ã]`).send();
                };
                let onEnd = () => {
                    let promises = [];
                    doc.lastAuction = Date.now();
                    doc.gold -= auctionCost;
                    usersInfo.map(userInfo => {
                        let eqUserInfo = equipments[userInfo.slot] && equipments[userInfo.slot].userInfo;
                        if (userInfo.slot !== undefined && (!eqUserInfo || userInfo.rate >= eqUserInfo.rate
                                && (userInfo.rate !== eqUserInfo.rate || userInfo.rateCount < eqUserInfo.rateCount))) {
                            equipments[userInfo.slot].userInfo = userInfo;
                        }
                    });
                    promises.push(doc.save());
                    promises.push(chat.removeListenerOn(chat.eventNames.message, onMessage));
                    equipments = equipments.filter(eq => eq.userInfo);
                    equipments.map(eq => {
                        promises.push(GameUserInfo.findOneAndUpdate({
                            userId: eq.userInfo.userId,
                        }, {
                            $inc: {gold: -eq.userInfo.rate},
                            $set: {
                                [eq.type]: {
                                    name: eq.name,
                                    power: eq.power,
                                },
                            },
                        }, {
                            upsert: true,
                        }));
                    });
                    return promiseFactory.allAsync(promises).then(() => {
                        this.chatAuction[chat.id] = false;
                        message.new.setTitleTemplate(command.messageTemplate.finalTitle)
                            .setBodyTemplate(
                                command.messageTemplate.finalBody,
                                n => chat.userNames[equipments[n].userInfo.userId].fullName,
                                n => equipments[n].icon,
                                n => equipments[n].name,
                                n => equipments[n].power,
                                n => equipments[n].userInfo.rate
                            )
                            .setTemplateLength(equipments.length);
                        if (!equipments.length) message.setEndTemplate(command.messageTemplate.failEmpty);
                        return message.send()
                    });
                };
                setTimeout(onEnd, this.config.auctionDuration * 6e4);
                setTimeout(() => {
                    let info = usersInfo.filter(userInfo => userInfo.rate);
                    if (info.length) {
                        setRatesToMessageBody(info, message.new);
                        message.setTitle(command.messageTemplate.finalInfoTitle)
                            .setTemplateLength(info.length);
                    } else {
                        message.new.setTitle(command.messageTemplate.finalInfoEmpty);
                    }
                    return message.send();
                }, (this.config.auctionDuration - 1) * 6e4);
                message
                    .setBodyTemplate(
                        command.messageTemplate.body,
                        n => n + 1,
                        n => equipments[n].icon,
                        n => equipments[n].name,
                        n => equipments[n].power,
                        n => equipments[n].minRate
                    )
                    .setTemplateLength(equipments.length);
                this.chatAuction[chat.id] = {
                    users: usersInfo,
                    ratesText: message.getText(),
                    setRatesToMessageBody
                };
                message.setTitleTemplate(command.messageTemplate.title, auctionCost)
                    .setEnd(command.messageTemplate.end);
                return message
                    .send()
                    .then(() => chat.on(chat.eventNames.message, onMessage));
            })
        });
    }

    /**
     *
     * @param {GameUserInfo} userInfo
     * @param {Message} message
     * @return {Message}
     */
    getUserInfoMessage(userInfo, message = new this.bot.Message) {
        let commandName = 'userInfo';
        let command = this.specification.commands.filter(command => command.name === commandName)[0];
        if (!command) return message;
        let names = this.equipmentNames;
        return message.setTitleTemplate(
            command.messageTemplate.title,
            userInfo.name,
            this.getStateLabel(userInfo.state),
            userInfo.state,
            userInfo.gold,
            userInfo.lvl,
            userInfo.exp,
            this._getNeededExpToLvl(userInfo.lvl + 1),
            userInfo.rating,
        )
            .setBodyTemplate(
                command.messageTemplate.body,
                n => this.equipmentInfo[names[n]].label,
                n => this.equipmentInfo[names[n]].icon,
                n => userInfo[names[n]].name,
                n => userInfo[names[n]].power
            )
            .setTemplateLength(names.length);
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    userInfo(chat, message, command) {
        let userIdOrName = command.check.args.exec(message.getCommandText())[1];
        let userId = userIdOrName && chat.findUser(userIdOrName) || message.user;
        return promiseFactory.allAsync([
            this._getUserInfo(chat, userId),
            GameDuelInfo.findOne({ userId }).exec(),
            GameRandomDuelInfo.findOne({ userId }).exec(),
        ]).then(([userInfo, duel, randomDuel]) => {
            this.getUserInfoMessage(userInfo, message);
            let getMinutes = (lastDuel = 0, timePeriod) => {
                return Math.ceil(Math.max(lastDuel + timePeriod - Date.now(), 0) / 6e4);
            };
            let duelMinutes = getMinutes(duel && +duel.date || 0, this.config.duelPeriod);
            let randomDuelMinutes = getMinutes(randomDuel && +randomDuel.date || 0, this.config.randomDuelPeriod);
            return message
                .setEndTemplate(
                    command.messageTemplate.end,
                    duelMinutes ? `—á–µ—Ä–µ–∑ ${duelMinutes} –º–∏–Ω.` : '–≥–æ—Ç–æ–≤',
                    randomDuelMinutes ? `—á–µ—Ä–µ–∑ ${randomDuelMinutes} –º–∏–Ω.` : '–≥–æ—Ç–æ–≤',
                )
                .send();
        })
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    chatsTop(chat, message, command) {
        return GameChatInfo.find().sort({ rating: -1 }).limit(this.config.chatsTopCount).exec()
            .then(docs => {
                return this.bot.vk.api.call('messages.getConversationsById', {
                    peer_ids: docs.map(doc => doc.chatId).join(',')
                }).then(chats => {
                    chats = chats.items;
                    return message.setTitleTemplate(command.messageTemplate.title)
                        .setBodyTemplate(
                            command.messageTemplate.body,
                            n => n + 1,
                            n => {
                                let chat = chats.filter(chat => +chat.peer.id === +docs[n].chatId)[0];
                                let title = chat && chat.chat_settings.title || docs[n].chatId.toString();
                                title = title.replace(/(]|&#93;)/, '&#8969;');
                                // let adminId = chat.admin_id;
                                return title; // TODO: get user id
                                // return `[id${adminId}|${title}]`
                            },
                            n => docs[n].chatId - 2e9,
                            n => docs[n].rating
                        )
                        .setTemplateLength(docs.length)
                        .send();
                })
            })
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    usersTop(chat, message, command) {
        return GameUserInfo.find().sort({ rating: -1 }).limit(this.config.usersTopCount).exec()
            .then(docs => {
                return this.bot.vk.api.users.get({
                    user_ids: docs.map(doc => doc.userId).join(',')
                }).then(users => {
                    return message.setTitleTemplate(command.messageTemplate.title)
                        .setBodyTemplate(
                            command.messageTemplate.body,
                            n => n + 1,
                            n => docs[n].userId,
                            n => {
                                let user = users.filter(user => user.id === docs[n].userId)[0];
                                return user && `${user.first_name} ${user.last_name}` || docs[n].userId;
                            },
                            n => docs[n].rating,
                        )
                        .setTemplateLength(docs.length)
                        .send();
                })
            })
    }

    /**
     *
     * @param {Message} message
     * @param {GameUserInfo} fromUserInfo
     * @param {GameUserInfo} toUserInfo
     * @return {{winner: GameUserInfo, looser: GameUserInfo, message: Message}}
     */
    _duel(message, fromUserInfo, toUserInfo) {
        let fromMessage = this.getUserInfoMessage(fromUserInfo);
        let toMessage = this.getUserInfoMessage(toUserInfo);
        fromUserInfo.luck = Math.round(Math.random() * fromUserInfo.fullPower * this.config.maxPowerLuck);
        toUserInfo.luck = Math.round(Math.random() * toUserInfo.fullPower * this.config.maxPowerLuck);
        fromUserInfo.duelPower = fromUserInfo.fullPower + fromUserInfo.luck;
        toUserInfo.duelPower = toUserInfo.fullPower + toUserInfo.luck;
        let getArgs = userInfo => [
            this.specification.messageTemplate.userInfoEnd + '\n',
            userInfo.equipmentPower,
            userInfo.activePower,
            userInfo.lvlPower,
            userInfo.luck,
            userInfo.duelPower,
        ];
        fromMessage._titleTemplateString = toMessage._titleTemplateString = this.specification.messageTemplate.userInfoSmall;
        fromMessage.setBodyTemplate('');
        toMessage.setBodyTemplate('');
        fromMessage.setEndTemplate(...getArgs(fromUserInfo));
        toMessage.setEndTemplate(...getArgs(toUserInfo));
        let [winner, looser] = [fromUserInfo, toUserInfo];
        if (fromUserInfo.duelPower < toUserInfo.duelPower) [winner, looser] = [looser, winner];
        let duelFinals = this.specification.messageTemplate.duelFinals;
        let duelFinal = duelFinals[Math.floor(Math.random() * duelFinals.length)];
        let promises = [];
        message.new
            .setTitleTemplate(
                this.specification.messageTemplate.duelInfo,
                fromMessage.getText(),
                toMessage.getText()
            )
            .setBodyTemplate(
                duelFinal,
                winner.name,
                looser.name,
                winner.weapon.name,
                looser[this.equipmentNames[Math.floor(Math.random() * this.equipmentNames.length)]].name,
                winner.name,
            );
        return {
            winner,
            looser,
            message,
        };
    };

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    duel(chat, message, command) {
        let userIdOrName = command.check.args.exec(message.getCommandText())[1];
        let userId = chat.findUser(userIdOrName);
        if (userId === message.user) return;
        if (!userId) return message.setTitleTemplate(command.messageTemplate.failUser, userIdOrName).send();
        if (this.chatDuels[message.user] || this.chatDuels[userId])
            return message.setTitleTemplate(command.messageTemplate.failRequest,
                chat.userNames[this.chatDuels[message.user] ? message.user : userId].fullName).send();
        this.chatDuels[message.user] = this.chatDuels[userId] = true;
        let duelInfo = {
            userId: message.user,
        };
        return GameDuelInfo.findOne(duelInfo).exec().then(doc => {
            if (doc && Date.now() - doc.date < this.config.duelPeriod) {
                let minToDuel = this.config.duelPeriod - (Date.now() - doc.date);
                this.chatDuels[message.user] = this.chatDuels[userId] = false;
                return message.setTitleTemplate(
                    command.messageTemplate.failPeriod,
                    chat.userNames[message.user].fullName,
                    Math.ceil(minToDuel / 6e4)
                ).send();
            }
            let duelTimeout;
            let onMessage;
            let stop = () => {
                clearTimeout(duelTimeout);
                delete this.chatDuels[message.user];
                delete this.chatDuels[userId];
                return chat.removeListenerOn(chat.eventNames.message, onMessage);
            };
            duelTimeout = setTimeout(() => stop().then(
                () => message.new
                    .setTitleTemplate(
                        command.messageTemplate.failTimeout,
                        chat.userNames[message.user].fullName,
                        chat.userNames[userId].fullName
                    )
                    .send()
            ), 6e4);
            /**
             *
             * @param {Message} newMessage
             */
            onMessage = newMessage => {
                let check = /^.?.?–≥–æ—Ç–æ–≤/i;
                if (newMessage.user !== userId || !check.test(newMessage.getCommandText())) return;
                return stop().then(() => {
                    return this._getAllUsersInfo(chat, [message.user, userId]).then(([fromUserInfo, toUserInfo]) => {
                        return GameDuelInfo.findOneAndUpdate(duelInfo, { date: new Date }, { upsert: true }).exec()
                            .then(() => this._duel(message, fromUserInfo, toUserInfo))
                            .then(({ winner, looser, message}) => {
                                let powerRatio = looser.fullPower / winner.fullPower;
                                let winnerExp = Math.round(this._getDuelExp(winner) * powerRatio) || 0;
                                let looserExp = Math.round(this._getDuelExp(looser) / powerRatio) || 0;
                                let winnerRating = this._getUserRating(winner, 1);
                                let looserRating = this._getUserRating(looser, 0, 1);
                                message.setEndTemplate(
                                    command.messageTemplate.end,
                                    chat.userNames[winner.userId].fullName,
                                    winnerRating - winner.rating,
                                    winnerExp,
                                    chat.userNames[looser.userId].fullName,
                                    looser.rating - looserRating,
                                    looserExp,
                                );
                                return promiseFactory.allAsync([
                                    GameUserInfo.findOneAndUpdate({
                                        userId: winner.userId,
                                    }, {
                                        $inc: {
                                            duelsWin: 1,
                                            exp: winnerExp,
                                        },
                                        $set: {
                                            rating: winnerRating,
                                        },
                                    }, {
                                        upsert: true
                                    }),
                                    GameUserInfo.findOneAndUpdate({
                                        userId: looser.userId,
                                    }, {
                                        $inc: {
                                            duelsLoose: 1,
                                            exp: looserExp,
                                        },
                                        $set: {
                                            rating: looserRating,
                                        },
                                    }, {
                                        upsert: true
                                    }),
                                    message.send(),
                                ]);
                            });
                    })
                });
            };
            return chat.on(chat.eventNames.message, onMessage, this).then(
                () => message
                    .setTitleTemplate(
                        command.messageTemplate.startDuel,
                        chat.userNames[message.user].fullName,
                        `[id${userId}|${chat.userNames[userId].fullName}]`
                    )
                    .send()
            );
        })
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    randomDuel(chat, message, command) {
        if (this.chatAuction[chat.id]) return message.setTitle(command.messageTemplate.failAuction).send();
        let [, rate = 0] = command.check.args.exec(message.getCommandText());
        let duelInfo = {
            userId: message.user,
        };

        return GameRandomDuelInfo.findOne(duelInfo).exec().then(doc => {
            if (doc && Date.now() - doc.date < this.config.randomDuelPeriod) {
                let minToDuel = this.config.randomDuelPeriod - (Date.now() - doc.date);
                return message.setTitleTemplate(
                    command.messageTemplate.failPeriod,
                    chat.userNames[message.user].fullName,
                    Math.ceil(minToDuel / 6e4)
                ).send();
            }

            return this._getUserInfo(null, message.user).then((fromUserInfo) => {
                if (fromUserInfo.gold < rate) {
                    return message.setTitleTemplate(command.messageTemplate.failGold, fromUserInfo.gold).send();
                }
                let maxRate = fromUserInfo.lvl * this.config.maxRateRandomDuelPerLvl;
                if (rate > maxRate) {
                    return message
                        .setTitleTemplate(command.messageTemplate.failRate, fromUserInfo.lvl, maxRate)
                        .send();
                }
                let params = this.equipmentNames.map(name => {
                    return {
                        [`${name}.power`]: {
                            $gte: fromUserInfo[name].power
                        }
                    }
                });
                return GameUserInfo.find({
                    $or: params,
                    userId: { $nin: [fromUserInfo.userId] }
                }).limit(50).exec().then(usersInfo => {
                    let userInfo = usersInfo[Math.floor(Math.random() * usersInfo.length)];
                    if (!userInfo) return message.setTitleTemplate(command.messageTemplate.failChat).send();
                    let toUserInfo;
                    fromUserInfo.name = chat.userNames[message.user].fullName;
                    return this._getUserInfo(null, userInfo.userId)
                        .then(info => {
                            toUserInfo = info;
                            for (let chat of Object.values(this.bot.chats)) {
                                if (chat.users.includes(toUserInfo.userId)) {
                                    toUserInfo.name = chat.userNames[toUserInfo.userId].fullName;
                                    break;
                                }
                            }
                        })
                        .then(() => GameRandomDuelInfo.findOneAndUpdate(
                            duelInfo, {date: new Date}, {upsert: true}
                        ).exec())
                        .then(() => this._duel(message, fromUserInfo, toUserInfo))
                        .then(({winner, looser, message}) => {
                            let powerRatio = looser.fullPower / winner.fullPower;
                            let isWinner = winner === fromUserInfo;
                            let direction = isWinner ? 1 : -1;
                            let exp = Math.round(this._getDuelExp(fromUserInfo) * Math.pow(powerRatio, direction)) || 0;
                            let rating = this._getUserRating(fromUserInfo, + isWinner, + !isWinner);
                            let template = isWinner
                                ? command.messageTemplate.endWinner
                                : command.messageTemplate.endLooser;
                            message.setEndTemplate(
                                template,
                                fromUserInfo.name,
                                toUserInfo.userId,
                                toUserInfo.name,
                                +rate,
                                Math.abs(fromUserInfo.rating - rating),
                                exp,
                            );
                            return promiseFactory.allAsync([
                                GameUserInfo.findOneAndUpdate({
                                    userId: fromUserInfo.userId,
                                }, {
                                    $inc: {
                                        [isWinner ? 'duelsWin' : 'duelsLoose']: 1,
                                        exp: exp,
                                        gold: direction * rate,
                                    },
                                    $set: {
                                        rating
                                    },
                                }, {
                                    upsert: true
                                }),
                                message.send(),
                            ]);
                        });
                })
            })
        });
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    chatsDuel(chat, message, command)   {
        if (this.chatAuction[chat.id]) return message.setTitle(command.messageTemplate.failAuction).send();
        let [, rate = 0] = command.check.args.exec(message.getCommandText());
        let chats = this.chats.filter(c => c.id !== chat.id && c.type === 'chat');
        let randomChat = chats[Math.floor(Math.random() * chats.length)];
        if (!randomChat) return message.setTitleTemplate(command.messageTemplate.failChat).send();

        return promiseFactory.allAsync([
            GameChatInfo.findOne({chatId: chat.id}).exec(),
            GameChatInfo.findOne({chatId: randomChat.id}).exec()
        ]).then(([doc, randomDoc]) => {
            if (!doc) doc = new GameChatInfo({chatId: chat.id});
            if (!randomDoc) randomDoc = new GameChatInfo({chatId: randomChat.id});
            if (rate > doc.gold) return message.setTitleTemplate(
                command.messageTemplate.failRate,
                doc.gold,
            ).send();
            if (doc && Date.now() - doc.lastChatDuel < this.config.chatDuelPeriod) {
                let minToDuel = this.config.chatDuelPeriod - (Date.now() - doc.lastChatDuel);
                return message.setTitleTemplate(
                    command.messageTemplate.failPeriod,
                    Math.ceil(minToDuel / 6e4)
                ).send();
            }

            return promiseFactory.allAsync([
                this._getAllUsersInfo(chat),
                this._getAllUsersInfo(randomChat),
            ]).then(([fromChatUsers, toChatUsers]) => {
                let chatLvl = this._getUsersAvgLvl(fromChatUsers);
                let maxRate = chatLvl * this.config.maxRateChatDuelPerLvl;
                if (rate > maxRate) return message.setTitleTemplate(
                    command.messageTemplate.failRateLvl,
                    chatLvl,
                    maxRate,
                ).send();
                fromChatUsers = fromChatUsers.filter(userInfo => userInfo.lastActive);
                toChatUsers = toChatUsers.filter(userInfo => userInfo.lastActive);
                let fromPower = fromChatUsers.reduce((power, userInfo) => power + userInfo.fullPower, 0);
                let toPower = toChatUsers.reduce((power, userInfo) => power + userInfo.fullPower, 0) || 0;
                let fromAvgPower = Math.round(fromPower / fromChatUsers.length)==NaN ? 0 : Math.round(fromPower / fromChatUsers.length);
                let toAvgPower = Math.round(toPower / toChatUsers.length) || 0;
                let fromUsersPower = fromChatUsers.length * this.config.chatDuelUserCountRatio;
                let toUsersPower = toChatUsers.length * this.config.chatDuelUserCountRatio || 0;
                let fromFullPower = fromAvgPower + fromUsersPower;
                let toFullPower = toAvgPower + toUsersPower;
                let isWinner = fromFullPower >= toFullPower;
                let direction = isWinner ? 1 : -1;
                let goldRatio = isWinner ? Math.min(fromFullPower / (toFullPower || 1), 2) : 1;
                let gold = Math.round(fromChatUsers.length * this.config.salaryByUser * goldRatio);
                if (!isWinner) gold *= this.config.chatDuelLooserGoldRatio;
                gold = Math.round(gold);
                let exp = Math.round(this._getDuelExp(fromChatUsers) * toFullPower / fromFullPower) || 0;
                doc.gold += gold + rate * direction ;
                doc.lastChatDuel = Date.now();
                doc[isWinner ? 'duelsWin' : 'duelsLoose'] += 1;
                doc.rating = this._getChatRating(doc);
                let endTemplate = isWinner ? command.messageTemplate.endWin : command.messageTemplate.endLoose;
                return promiseFactory.allAsync([
                    doc.save(),
                    GameUserInfo
                        .updateMany({
                            userId: { $in: fromChatUsers.map(userInfo => userInfo.userId) },
                        }, {
                            $inc: {
                                exp,
                            },
                        }, {
                            upsert: true,
                        }).exec(),
                    message
                        .setTitleTemplate(
                            command.messageTemplate.title,
                            chat.title,
                            chat.id - 2e9,
                            fromAvgPower,
                            fromUsersPower,
                            this._getChatRating(doc),
                            randomChat.title,
                            randomChat.id - 2e9,
                            toAvgPower,
                            toUsersPower,
                            this._getChatRating(randomDoc),
                        )
                        .setEndTemplate(
                            endTemplate,
                            gold,
                            rate,
                            exp,
                        )
                        .send(),
                ])
            })
        });
    }

    /**
     *
     * @param {Chat} chat
     * @param {Message} message
     * @param {SpecificationCommand} command
     */
    timers(chat, message, command) {
        return promiseFactory.allAsync([
            GameDuelInfo.find({ userId: { $in: chat.users } }).exec(),
            GameRandomDuelInfo.find({ userId: { $in: chat.users } }).exec(),
            GameChatInfo.findOne({ chatId: chat.id }).exec(),
        ]).then(([duels, randomDuels, chatInfo]) => {
            let chatDuel = chatInfo && chatInfo.lastChatDuel || 0;
            let chatSalary = chatInfo && chatInfo.lastSalary || 0;
            let chatAuction = chatInfo && chatInfo.lastAuction || 0;
            let getMinutes = (lastDuel = 0, timePeriod) => {
                return Math.ceil(Math.max(lastDuel + timePeriod - Date.now(), 0) / 6e4);
            };
            let users = chat.users.map(userId => {
                let duel = duels.filter(doc => doc.userId === userId)[0];
                let randomDuel = randomDuels.filter(doc => doc.userId === userId)[0];
                return {
                    id: userId,
                    duel: getMinutes(duel && +duel.date || 0, this.config.duelPeriod),
                    randomDuel: getMinutes(randomDuel && +randomDuel.date || 0, this.config.randomDuelPeriod),
                };
            });
            return message
                .setTitleTemplate(
                    command.messageTemplate.title,
                    getMinutes(chatAuction, this.config.auctionPeriod),
                    getMinutes(chatDuel, this.config.chatDuelPeriod),
                    getMinutes(chatSalary, this.config.salaryPeriod),
                )
                .setBodyTemplate(
                    command.messageTemplate.body,
                    n => chat.userNames[users[n].id].fullName,
                    n => users[n].duel ? users[n].duel + ' –º–∏–Ω.' : '–≥–æ—Ç–æ–≤',
                    n => users[n].randomDuel ? users[n].randomDuel + ' –º–∏–Ω.' : '–≥–æ—Ç–æ–≤',
                )
                .setTemplateLength(users.length)
                .send();
        })
    }

};
